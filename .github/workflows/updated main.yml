name: Groq AI Auto Commit and Deploy

on:
  push:
    branches:
      - main

jobs:
  ai-commit-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # allows workflow to push changes

    steps:
      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2Ô∏è‚É£ Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 3Ô∏è‚É£ Install dependencies
      - name: Install Dependencies
        run: |
          pip install --upgrade groq

      - name: Run Groq AI to Update Website UI
        env:
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        run: |
          python << 'EOF'
          import os
          import subprocess
          from pathlib import Path
          import re
          from groq import Groq

          # Initialize Groq client
          client = Groq(api_key=os.environ["GROQ_API_KEY"])

          prompt = """
         UI Design Prompt: Image-Free, High-End E-commerce
         Design a sophisticated, image-free e-commerce website UI for a brand selling high-quality, exclusive products (e.g., luxury watches, artisanal coffee, or minimalist stationery). The design must rely entirely on premium typography, refined color use, clean layout, and subtle geometric accents to convey value, quality, and exclusivity.
          Core Aesthetic & Branding
          Brand Vibe: Exclusive, Architectural, and Deliberate. The interface should feel structured and editorial, treating product details with the reverence of museum text or a high-fashion catalog.
          Image Restriction: Strictly no images or raster graphics. Product representation must be achieved through detailed descriptions, price formatting, and simple placeholder boxes or geometric outlines.
          Focus: Detail and Information Hierarchy. The design's success is measured by how effectively it makes text-based information (Name, Price, Material, Story) feel premium and engaging.

          Technical & Design Requirements
          Color Palette: Use a monochromatic base (Black and White/Very Light Gray), accented by a single, deep, non-vibrant accent color (e.g., Deep Forest Green, Charcoal, or Aged Bronze) to highlight key actions and prices.
          
          Typography:
          Headings/Display: A highly distinctive, elegant serif (for luxury and heritage). Use thin weights and wide letter-spacing.
          Body/Product Details: A clean, highly readable modern sans-serif (for clarity and function).
          Use fixed-width (monospace) font specifically for product SKUs, prices, or dates to add a technical/architectural feel.  
          Product Card Representation:
          Instead of a photo, use a simple, square or rectangular outline box on the card.
          Place the Product Name (Serif, Bold) and Price (Monospace) outside the outline box, creating tension and focus.
          Key Page Focus Areas
          Homepage Hero:
          Feature a single, centered Hero Headline using an enormous, thin-weight serif font.
          Below the headline, use a call-to-action button styled purely with the accent color and bold text.
          Use fine horizontal and vertical lines to frame the hero content area.
          Product Listing Page (Grid):
          Must use a strict, spacious grid (3 or 4 columns).
          Include a Filter/Sort Bar that uses minimal text links and uses small, simple vector dots or triangles for active states.
          Product Detail Page (PDP):
          Layout should be a two-column split.
          Left Column (Visual Slot): A large, empty square/rectangle outline.
          Right Column (Details): Highly organized information: Product Name (Huge), Price (Monospace, Accent Color), Description, and structured data blocks (e.g., "Materials: Brass," "Weight: 450g").
          "Add to Cart" Button: Use the accent color background, bold sans-serif text, and a hover state that simply inverts the color.

          Return each file as:
          ---filename.ext---
          <file content>
          """

          # Generate updated UI content using Groq chat completion
          response = client.chat.completions.create(
              messages=[{"role": "user", "content": prompt}],
              model="llama-3.3-70b-versatile"
          )
          output = response.choices[0].message.content

          # Parse Groq's output to write files
          matches = re.findall(r"---(.*?)---\n(.*?)(?=(?:---|$))", output, re.DOTALL)
          for filename, content in matches:
              filepath = Path(filename.strip())
              filepath.parent.mkdir(parents=True, exist_ok=True)
              with open(filepath, "w", encoding="utf-8") as f:
                  f.write(content.strip())

          # Git commit and push changes
          subprocess.run(["git", "config", "--global", "user.name", "groq-bot"])
          subprocess.run(["git", "config", "--global", "user.email", "bot@example.com"])
          subprocess.run(["git", "add", "."])
          subprocess.run(["git", "commit", "-m", "ü§ñ Groq AI updated website UI"])
          subprocess.run(["git", "push"])
          EOF

      # 5Ô∏è‚É£ Configure AWS credentials for deployment
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # 6Ô∏è‚É£ Deploy updated repo to S3
      - name: Deploy to S3
        run: |
          aws s3 sync . s3://staticwebzsitegit --delete
